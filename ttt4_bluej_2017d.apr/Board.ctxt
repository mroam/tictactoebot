#BlueJ class context
comment0.target=Board
comment0.text=\n\ Contains\ (keeps\ track\ of\ and\ displays)\ 4\ boards\ of\ 4x4\ grids\n\ "chooseMove(\ )"\ ,\ below,\ has\ the\ code\ for\ computer\ deciding\ how\ to\ respond\ to\ a\ move.\n\ \n\ @author\ Mike\ Roam\n\ @version\ rev.\ 6\ Dec\ 2004,\ annotated\ &\ reformated\ 2016\ oct\ 22\n\ Was\ Canvas,\ pre\ Swing,\ and\ replaced\ by\ JPanel,\ 2017\ mar\ 22\n\ See\ http\://www.java2s.com/Tutorial/Java/0240__Swing/UsingJPanelasacanvas.htm\n\ \n\ Does\ this\ need\ a\ preferredSize/Width/Height\ method(s)?\n
comment1.params=boardWidth\ boardHeight\ newParent
comment1.target=Board(int,\ int,\ Boss)
comment1.text=\ \n\ Constructor\ receives\ new\ width,\ new\ height,\ and\ a\ link\ back\ to\ the\ controlling\ applet.\n\ Builds\ cells\ (which\ are\ rectangles\ with\ coordinates)\ so\ that\ the\ "coordinates"\ of\ cells\ are\n\ in\ four\ boards\ with\ x,y\ origins\ in\ upper\ left\ corner.\ Each\ board\ is\ diff\ Z,\ counting\ from\ left\ to\ right...\ \n\ 0,0,0\ \ \ 1,0,0\ \ \ 2,0,0\ \ \ 3,0,0\n\ 0,1,0\ \ \ 1,1,0\ \ \ 2,1,0\ \ \ 3,1,0\ \ \ \ \ \ \ next\ board\ has\ z\=1\:\ \ \n\ 0,2,0\ \ \ 1,2,0\ \ \ 2,2,0\ \ \ 3,2,0\ \ \ \ \ \ \ 0,0,1\ \ \ 1,0,1\ \ \ 2,0,1\ \ \ 3,0,1\n\ 0,3,0\ \ \ 1,3,0\ \ \ 2,3,0\ \ \ 3,3,0\ \ \ \ \ \ \ 0,1,1\ \ \ 1,1,1\ \ \ 2,1,1\ \ \ 3,1,1\ \ \ \ \ \ \ next\ board\ over\ has\ z\=2\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 0,2,1\ \ \ 1,2,1\ \ \ 2,2,1\ \ \ 3,2,1\ \ \ \ \ \ \ 0,0,2\ \ \ 1,0,2\ \ \ 2,0,2\ \ \ 3,0,2\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 0,1,2\ \ \ 1,1,2\ \ \ 2,1,2\ \ \ 3,1,2\ \ etc...\n
comment10.params=XorO
comment10.target=CellLoc\ canWin(int)
comment10.text=\n\ Detect\ a\ three-in-a-row\ with\ blank\ and\ return\ the\ blank's\ loc\ (or\ null).\n
comment11.params=XorO
comment11.target=CellLoc\ canImprove(int)
comment11.text=\n\ Detect\ a\ computer\ two-in-a-row\ (with\ rest\ blank)\ and\ return\ one\ of\ \n\ the\ blanks'\ loc\ (or\ null)\n
comment12.params=newMove\ XorO
comment12.target=java.util.Vector\ newWins(CellLoc,\ int)
comment12.text=\ \n\ This\ method\ is\ expressly\ for\ finding\ groups\ of\ 4\ that\ won\ with\ the\ specified\ moves.\n\ (This\ lets\ us\ light\ up\ the\ recent\ wins.)\n\ Returns\ a\ Vector\ full\ of\ "Group4".\n
comment13.params=g
comment13.target=void\ paintComponent(java.awt.Graphics)
comment13.text=\n\ Draws\ a\ picture\ of\ the\ board,\ by\ telling\ cells\ to\ paint\ themselves.\n\ Was\ "paint(\ )"\ until\ Board\ upgraded\ to\ JPanel\n
comment14.params=newColor
comment14.target=void\ setColor(java.awt.Color)
comment15.params=XorO
comment15.target=int\ opponent(int)
comment15.text=\n\ utility\ function\n\ for\ "X"\ this\ returns\ "O"\ and\ vice-versa\n
comment16.params=x\ y\ z
comment16.target=Cell\ getCellObj(int,\ int,\ int)
comment16.text=\ \n\ Returns\ the\ pointer\ to\ the\ specified\ cell.\n
comment17.params=theLoc
comment17.target=Cell\ getCellObj(CellLoc)
comment17.text=\ \n\ Returns\ the\ pointer\ to\ the\ specified\ cell.\n
comment18.params=x\ y\ z
comment18.target=int\ getCellXorO(int,\ int,\ int)
comment18.text=\n\ Returns\ the\ DATA\ (blank,X,\ or\ O)\ of\ the\ specified\ cell.\n
comment19.params=theLoc
comment19.target=int\ getCellXorO(CellLoc)
comment19.text=\n\ Returns\ the\ DATA\ (blank,X,\ or\ O)\ of\ the\ specified\ cell.\n
comment2.params=e
comment2.target=void\ mousePressed(java.awt.event.MouseEvent)
comment20.params=x\ y\ z\ XorO
comment20.target=void\ setCellXorO(int,\ int,\ int,\ int)
comment20.text=\ \n\ Sets\ the\ DATA\ \ of\ the\ specified\ cell\ to\ blank,\ X,\ or\ O\n
comment21.params=theLoc\ XorO
comment21.target=void\ setCellXorO(CellLoc,\ int)
comment21.text=\ \n\ \ Sets\ the\ DATA\ \ of\ the\ specified\ cell\ to\ blank,\ X,\ or\ O\ \n
comment22.params=
comment22.target=void\ newGame()
comment22.text=\ \n\ Blank\ out\ all\ the\ squares\ and\ the\ score,\ (including\ color)\n
comment23.params=args
comment23.target=void\ main(java.lang.String[])
comment23.text=\n\ main(\ )\ for\ board\ so\ we\ can\ instantiate\ one\ to\ mess\ around\ with.\n\ Not\ normally\ used.\ (Boss\ will\ create\ a\ JFrame\ to\ hold\ us,\ jah?\n\ From\ example\ of\ JPanel\ as\ canvas\ \n\ http\://www.java2s.com/Tutorial/Java/0240__Swing/UsingJPanelasacanvas.htm\n
comment3.params=theMoveLoc
comment3.target=void\ cellHasBeenClicked(CellLoc)
comment3.text=\n\ This\ decides\ how\ to\ respond\ to\ opponent's\ move\n
comment4.params=
comment4.target=void\ warnOpponent()
comment4.text=\n\ Detect\ a\ human\ possibilites\ (three-in-a-group\ w/\ blank;\ 2-in-a-group\ \n\ \ \ \ \ \ \ \ w/\ blanks)\ and\ color\ code\ them\ (red,\ yellow).\ Also\ detect\ the\ computer\ possibilities\ and\ color\ code\ them\ \n\ \ \ \ \ \ \ \ (lightgrey,\ darkgrey?)\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ Possible\ Optimization\:\ run\ it\ once\ finding\ and\ saving\ all\ the\ 3s\ and\ 2s.\ Then\ \n\ \ \ \ \ \ \ \ color\ all\ the\ twos,\ then\ finally\ color\ all\ the\ 3s\ so\ that\n\ \ \ \ \ \ \ \ their\ information\ washes\ over.\ Alternatives\ are\ to\ run\ through\ all\ \n\ \ \ \ \ \ \ \ the\ groups\ twice\ with\ coloring,\ once\ for\ 2s\ and\ then\ for\ 3s.\n
comment5.params=
comment5.target=void\ recountScores()
comment5.text=\ \n\ Walk\ through\ the\ whole\ grid\ counting\ winning\ groups\ of\ four.\n\ Somebody\ is\ not\ using\ the\ last\ diagdiag\ group\ --\ maybe\ this\ for\ (\ )\ is\ going\ obob?\n
comment6.params=
comment6.target=CellLoc\ chooseRandomMove()
comment7.params=whoToLookForXorO
comment7.target=CellLoc\ chooseMove(int)
comment7.text=\n\ Going\ to\ call\ some\ methods\ which\ return\ null\ (no\ move\ found)\ or\ the\ loc\ of\ the\ move.\n\ Finally,\ chooseRandomMove(\ )\ is\ ALMOST\ guaranteed\ to\ return\ a\ move\ unless\ the\ board\ is\ full.\ \n\ What\ to\ do\ if\ the\ board\ is\ full?\ \ hmmm,\ this\ just\ takes\ the\ first\ available\ win\ which\ might\ \n\ not\ be\ the\ BEST\:\ some\ other\ win\ might\ win\ in\ two\ directions\ at\ once\!\ \n\ Should\ rank\ and\ compare\ the\ wins\ (or\ all\ possible\ moves).\n\ \n\ This\ is\ almost\ identical\ to\ chooseMoveSmart,\ except\ this\ does\ not\ run\ (AI\ self-play)\ tournaments\ to\ decide\ moves.\n\ \n\ This\ used\ to\ be\ called\ by\ cellHasBeenClicked(\ )\ but\ now\ is\ usually\ (only?)\ called\ by\ chooseMoveSmart(\ )\n
comment8.params=
comment8.target=CellLoc\ chooseMoveSmart()
comment8.text=\n\ Going\ to\ call\ some\ methods\ which\ return\ null\ (no\ move\ found)\ or\ the\ loc\ of\ the\ move.\n\ Finally,\ chooseRandomMove(\ )\ is\ ALMOST\ guaranteed\ to\ return\ a\ move\ unless\ the\ board\ is\ full.\ \n\ What\ to\ do\ if\ the\ board\ is\ full?\ \ hmmm,\ this\ just\ takes\ the\ first\ available\ win\ which\ might\ \n\ not\ be\ the\ BEST\:\ some\ other\ win\ might\ win\ in\ two\ directions\ at\ once\!\ \n\ Should\ rank\ and\ compare\ the\ wins\ (or\ all\ possible\ moves).\n\ \n\ This\ is\ almost\ identical\ to\ chooseMove,\ except\ this\ also\ runs\ AI\ self-play\ tournaments\ to\ decide\ moves.\n\ PS\:\ tournaments\ do\ NOT\ call\ chooseMoveSmart\ but\ instead\ merely\ use\ chooseMove(\ )\n\ maybe\ we\ ought\ to\ have\ semi-smart\ (or\ time-restricted)\ moves\ for\ tournaments.\n\ Perhaps\ the\ human\ moves\ would\ be\ random\ in\ our\ tournament\ games??\n\ \n\ This\ is\ called\ by\ cellHasBeenClicked(\ )\n
comment9.params=XorO\ timeLimitInSeconds
comment9.target=CellLoc\ useTournamentToDecide(int,\ int)
comment9.text=\n\ For\ all\ of\ the\ possible\ moves,\ try\ playing\ a\ full\ game\ starting\ with\ that\ move.\n\ So\ there\ could\ be\ at\ most\ 64\ games\ if\ we\ play\ one\ for\ each\ possible\ move...\n
numComments=24
